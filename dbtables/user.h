// generated by /home/gustavo/dev/sqlpp11/scripts/ddl2cpp ./user.sql ../dbtables/user users
#ifndef USERS_USER_H
#define USERS_USER_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace users
{
  namespace User_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct CreatedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createdTime;
            T& operator()() { return createdTime; }
            const T& operator()() const { return createdTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
    struct UpdatedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "updated_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T updatedTime;
            T& operator()() { return updatedTime; }
            const T& operator()() const { return updatedTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct Active
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "active";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T active;
            T& operator()() { return active; }
            const T& operator()() const { return active; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::require_insert>;
    };
    struct Username
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "username";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T username;
            T& operator()() { return username; }
            const T& operator()() const { return username; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  } // namespace User_

  struct User: sqlpp::table_t<User,
               User_::Id,
               User_::CreatedTime,
               User_::UpdatedTime,
               User_::Active,
               User_::Username,
               User_::Password>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "user";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T user;
        T& operator()() { return user; }
        const T& operator()() const { return user; }
      };
    };
  };
} // namespace users
#endif
